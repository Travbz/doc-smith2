"""Tool for managing GitHub pull requests."""
from typing import Dict, Any, List, Optional
from github import Github
from datetime import datetime
from core.services.logging import setup_logger

logger = setup_logger(__name__)

class PullRequestManager:
    def __init__(self, agent):
        self.agent = agent
        
    async def create_pull_request(self, documentation: Dict[str, str], repo_info: Dict[str, Any]) -> Dict[str, Any]:
        """Create a pull request with documentation changes."""
        try:
            # Get repository
            repo = await self.agent.repo_manager._get_repository(repo_info["full_name"])
            if not repo:
                raise ValueError(f"Repository not found: {repo_info['full_name']}")

            # Create branch for changes
            current_time = datetime.now()
            branch_name = f"docs/update-{current_time.strftime('%Y-%m-%d-%H-%M')}"
            base_branch = repo_info.get("default_branch", "main")
            
            # Create branch from default branch
            base_ref = repo.get_branch(base_branch)
            repo.create_git_ref(f"refs/heads/{branch_name}", base_ref.commit.sha)
            
            # Create/update documentation files
            for file_path, content in documentation.items():
                try:
                    # Try to get existing file
                    file = repo.get_contents(file_path, ref=branch_name)
                    repo.update_file(
                        file_path,
                        f"docs: update {file_path}",
                        content,
                        file.sha,
                        branch=branch_name
                    )
                except Exception:
                    # File doesn't exist, create it
                    repo.create_file(
                        file_path,
                        f"docs: create {file_path}",
                        content,
                        branch=branch_name
                    )
            
            # Create pull request with conventional commit format
            pr = repo.create_pull(
                title=f"docs: update project documentation ({current_time.strftime('%Y-%m-%d')})",
                body="Automatically generated documentation updates",
                head=branch_name,
                base=base_branch
            )
            
            return {
                "status": "success",
                "data": {
                    "pr_url": pr.html_url,
                    "branch": branch_name
                }
            }
            
        except Exception as e:
            logger.error(f"Error creating pull request: {str(e)}")
            return {
                "status": "error",
                "error": str(e)
            }
        
    async def update_pull_request(
        self,
        repo_url: str,
        pr_number: int,
        updates: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Update an existing pull request."""
        repo = self.agent.repo_manager._get_repo(repo_url)
        pr = repo.get_pull(pr_number)
        
        if "title" in updates:
            pr.edit(title=updates["title"])
            
        if "body" in updates:
            pr_body = await self._generate_pr_body(updates["body"])
            pr.edit(body=pr_body)
            
        return {
            "number": pr.number,
            "url": pr.html_url,
            "title": pr.title,
            "body": pr.body
        }
        
    async def _generate_pr_body(self, content: str) -> str:
        """Generate formatted PR body."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        template = f"""# Documentation Update

Generated by DocSmith on {timestamp}

## Changes
{content}

## Validation
- [x] Documentation structure verified
- [x] Technical content validated
- [x] Examples tested
- [x] Links checked

## Notes
- Please review the changes and ensure they meet project standards
- Pay special attention to technical accuracy and completeness
- Verify examples and code snippets work as expected
"""
        return template